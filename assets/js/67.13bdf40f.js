(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{227:function(t,a,_){"use strict";_.r(a);var e=_(0),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,_=t._self._c||a;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"缓存机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缓存机制"}},[t._v("#")]),t._v(" 缓存机制")]),t._v(" "),_("h2",{attrs:{id:"缓存类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缓存类型"}},[t._v("#")]),t._v(" 缓存类型")]),t._v(" "),_("p",[t._v("宏观上分为私有缓存（用户专享）和共享缓存，主要区别在于能不能被各级代理缓存。")]),t._v(" "),_("p",[t._v("微观上分为下面几类")]),t._v(" "),_("h1",{attrs:{id:"_1-浏览器缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-浏览器缓存"}},[t._v("#")]),t._v(" 1.浏览器缓存")]),t._v(" "),_("p",[t._v("分为强制缓存和协商缓存，主要通过 Cache-Control 等响应头来控制，下面详细描述")]),t._v(" "),_("h1",{attrs:{id:"_2-cdn-缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-cdn-缓存"}},[t._v("#")]),t._v(" 2.CDN 缓存")]),t._v(" "),_("p",[_("em",[t._v("CDN:Content Delivery Network(内容分发网络)")])]),t._v(" "),_("p",[t._v("CDN 通常入口是网关服务器，然后通过负载均衡动态转发到合适的服务器上。通常图片、视频、第三方 js 库等这样的资源会使用 CDN")]),t._v(" "),_("h1",{attrs:{id:"_3-代理服务器缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-代理服务器缓存"}},[t._v("#")]),t._v(" 3.代理服务器缓存")]),t._v(" "),_("h1",{attrs:{id:"_4-数据库缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-数据库缓存"}},[t._v("#")]),t._v(" 4.数据库缓存")]),t._v(" "),_("p",[t._v("例如 Redis")]),t._v(" "),_("h1",{attrs:{id:"_5-应用层缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-应用层缓存"}},[t._v("#")]),t._v(" 5.应用层缓存")]),t._v(" "),_("p",[t._v("代码层面上的缓存。")]),t._v(" "),_("h2",{attrs:{id:"缓存过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缓存过程"}},[t._v("#")]),t._v(" 缓存过程")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/12mPmHVcSul2z47ns83aOe6LFWFnlcLZt8GoV0IAHAPwpNOjxwwFFmYxNS4icb5QpnHpcNNKPKvQmqo46x6pcog/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"缓存过程"}})]),t._v(" "),_("p",[_("strong",[t._v("浏览器每次发起请求，都会现在浏览器缓存中查找该请求的结果以及缓存标识")])]),t._v(" "),_("p",[_("strong",[t._v("浏览器每次拿到返回的请求结果都会将结果和缓存标识存入浏览器缓存中")])]),t._v(" "),_("h2",{attrs:{id:"强缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#强缓存"}},[t._v("#")]),t._v(" 强缓存")]),t._v(" "),_("p",[t._v("不会向服务器发送请求，直接从缓存中读取资源，在 F12 的 network 里可以看到是不是缓存\n"),_("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/12mPmHVcSul2z47ns83aOe6LFWFnlcLZSjWG39D1oJNPj666Zn33zTwEOJVQibWdVYEBTToSwDK1Iyr84YPUJmQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"读取缓存"}})]),t._v(" "),_("p",[t._v("from memory cache（js,图片） > from disk cache（CSS）")]),t._v(" "),_("p",[t._v("相关响应头如下")]),t._v(" "),_("h1",{attrs:{id:"expires"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#expires"}},[t._v("#")]),t._v(" Expires")]),t._v(" "),_("p",[t._v("http1.0")]),t._v(" "),_("p",[t._v("过期时间，浏览器再次加载资源时，如果在这个时间内，则命中强缓存，它的值为 GMT 时间字符串:expires: Fri, 31 Aug 2029 04:09:50 GMT")]),t._v(" "),_("h1",{attrs:{id:"cache-control"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cache-control"}},[t._v("#")]),t._v(" Cache-Control")]),t._v(" "),_("p",[t._v("http1.1 优先级高于 Expires")]),t._v(" "),_("p",[t._v("在 HTTP/1.1 中，Cache-Control 是最重要的规则。比如 cache-control: max-age=315360000 代表在这个秒数内再次加载资源就会命中强缓存。常见属性如下")]),t._v(" "),_("p",[t._v("**public:**所有内容将被缓存，能被任何中间节点缓存，例如浏览器 - 代理 1 - 服务器这个过程，下次请求代理 1 可以直接响应缓存，不用再去服务器。")]),t._v(" "),_("p",[t._v("**private:**默认值，所有内容只有客户端可以缓存。")]),t._v(" "),_("p",[t._v("**no-cache:**no-cache 不是不缓存的意思，客户端是否使用缓存需要经过协商缓存验证决定。此时使用 Etag 或者 Last-Modified 字段控制缓存。")]),t._v(" "),_("p",[t._v("**no-store:**no-cache 才是不缓存。")]),t._v(" "),_("p",[t._v("**max-age:**超时时间，表示内容在 n 秒之后失效")]),t._v(" "),_("p",[t._v("**s-maxage:**同上，用于代理缓存，会覆盖掉 max-age 和 Expires")]),t._v(" "),_("p",[t._v("强缓存判断是否缓存的依据是超时，这可能会导致加载文件不是服务器端最新的内容，怎么解决这个问题，此时需要用到协商缓存策略，例如上文提到的 Etag,Last-Modified 等")]),t._v(" "),_("h2",{attrs:{id:"协商缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[t._v("#")]),t._v(" 协商缓存")]),t._v(" "),_("p",[_("strong",[t._v("Last-Modified 和 If-Modified-Since:")]),t._v(" 浏览器第一次访问资源时，服务器返回资源同时，在响应头中添加 Last-Modified: Wed, 07 Nov 2012 16:00:00 GMT（最后修改时间）。")]),t._v(" "),_("p",[t._v("浏览器下一次请求这个资源，浏览器检测到有 Last-Modified 这个 header，在请求头上添加 If-Modified-Since:Last-Modified，服务器收到请求会对比 If-Modified-Since 和资源最后修改时间，如果没变化返回 304 和空的 body，直接读缓存。如果小于最后修改时间，说明文件有更新，返回新的资源和 200")]),t._v(" "),_("p",[t._v("**缺点：**1.某些服务端不能获取精确的修改时间 2.文件修改时间改了，但是文件内容没变。此时 Etag 和 If-None-Match 就派上了用场")]),t._v(" "),_("p",[t._v("**Etag 和 If-None-Match:**Etag 是服务器对该资源通过某种算法(hash 等)得出的一个串，是资源的唯一标识，只要资源有变化，Etag 就会重新生成。浏览器下次发请求时，会在请求头上带上 If-None-Match:Etag，服务器收到请求比较 If-None-Match 和服务器上 Etag 是否一致。Etag 不同，返回 200，相同返回 304。")]),t._v(" "),_("p",[t._v("**协商缓存总结：**精确度上，Etag 优于 Last-Modified；性能上，Etag 较差，需要经过算法计算。Etag 优先级更高")]),t._v(" "),_("h2",{attrs:{id:"浏览器缓存机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存机制"}},[t._v("#")]),t._v(" 浏览器缓存机制")]),t._v(" "),_("p",[t._v("强制缓存>协商缓存，如果强制缓存生效直接使用缓存，不生效进行协商缓存，协商缓存失效代表缓存失效，返回200、资源和缓存标识，存入浏览器缓存中；缓存生效则返回304，继续使用缓存，流程图如下。\n"),_("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/12mPmHVcSul2z47ns83aOe6LFWFnlcLZ4pkU7H79JB0ibPgxddwcmvCCUWgGZOgHq6fWyIibxWadVFzVO2NCqm6Q/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"缓存流程图"}})]),t._v(" "),_("h2",{attrs:{id:"用户行为对浏览器缓存的影响"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#用户行为对浏览器缓存的影响"}},[t._v("#")]),t._v(" 用户行为对浏览器缓存的影响")]),t._v(" "),_("ol",[_("li",[t._v("地址栏访问，直接触发")]),t._v(" "),_("li",[t._v("F5刷新，浏览器设置max-age=0，跳过强缓存判断，会进行协商缓存判断")]),t._v(" "),_("li",[t._v("ctrl+F5刷新，跳过缓存，直接从服务器获取资源")])])])}),[],!1,null,null,null);a.default=r.exports}}]);